### 이론
1. TDD란 무엇인지 설명할 수 있다.
    -> 기능단위(function)로 점검// 준비, 실행, 단언
2. 견고한 소프트웨어가 무엇인지 설명할 수 있다.
    -> 단일책임의 원리 (한가지 소스 코드는 한가지 역할만 한다.)
    -> 오픈클로즈의 원리(확장에는 열려있고 변경에는 닫혀 있어야 한다.)
    ---> 하드코딩은 없애고(인자로 받는다.) 기능이 추가된다면 함수를 또 만드는 것이 아닌
         기존 함수를 변경한다.

3. 단언의 다음과 같은 상황들을 사용할 수 있다.
   * expect(actual).toThrowError()
   * expect(counter.getValue()).toBe(0)
   * spyOn(clickCounter, 'count'), expect(clickCounter.count).toHaveBeenCalled()

### 응용
1. 목표 : 버튼 클릭 시 +1씩 증가하는 javascript를 만드는데 TDD 방법론으로 개발하기

### 단계
1. 모듈(한 가지 역할)단위를 결정한다. 2. 모듈의 스팩(function)을 정의해본다.

### 파일설명
spec --> 테스트코드
src --> 소스코드
index.html --> 소스코드
indexSpec.html --> 테스트코드 실행파일
intro.txt --> 목차
wrong_index.html --> 잘못된 파일

### 실행방법
indexSpec.html 의 경로를 복사해 crome 주소에 붙여넣기 한다.

### 모듈정리
1. 데이터를 관리하는 모듈을 만들자. -> ClickCounter
2. 데이터를 추출하고 화면에 바인딩하고 이벤트를 관리하는 모듈을 만들자. -> ClickCounterView

### 스팩정리
1. ClickCounter
 1_1) 데이터를 가져오는 기능 getValue
 1_2) 데이터를 증가하는 기능 increase

2. ClickCounterView
 2_0) ClickCounter에 의존적이므로 주입확인 테스트 (생성자)
 2_1) 화면에 바인딩하는 기능 updateView
 2_1) 데이터를 출력하고 화면에 바인딩하는 기능 getValueAndUpdateView
 2_2) 이벤트를 바인딩하는 기능 click










